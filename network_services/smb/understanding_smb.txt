Understanding SMB

SMB - Server Message Protocol - is a client-server communication protocol used for sharing access to files, printers, serial ports, and other
resources on a network.

Servers make filesystems and other resources like the ones named above available to clients on the network. Computers have their own harddrive
but they may still need access to the shared files and devices on the server.

The SMB protocl is a response request protocol, meaning that it transmits multiple messages between the client and the server in order to establish
a connection. Client connect to the server using TCP/IP (NOTE: more accurately it's Netbios over TCP/IP, RFC 1001 and 1002), NetBEUI, IPX/SPX.

Client		Server
SMB Requests------>
  <---------SMB Responses

Once this connection has been established, clients send SMBs (commands) to the server which allow them to read/write files, utilize devices, access
shares, etc. Generally all things that you can do with a file system but over the network.

What runs SMB?

SMB client and server support has been included in Microsoft OSs since Windows 95. Samba, and open source server that supports the SMB protocol,
was released for UNIX systems.


Enumerating SMB

Typically there are SMB share drives on a server that can be connected to and used to view and share files. These a great starting point for an
attacker since they are almost bound to contain valuble info.

Port Scanning

This is the first stop in enumerating. Much information can be gathered from here as seen in the previous rooms.

Enum4Linux

Enum4Linux is a tool used to enumerate SMB shares on both Windows and Linux Systems. Enum4Linux is basically a wrapper around tools in the Samba
package and makes it easy to extract information from the target pertaining to SMB. If you need to install it, do so from the tool's github.

Basic Syntax:
	>>> enum4linux [options] <target ip>

Here are some common switches:
-U             get userlist
-M             get machine list
-N             get namelist dump (different from -U and-M)
-S             get sharelist
-P             get password policy information
-G             get group and member list

-a             all of the above (full basic enumeration)

Exploiting SMB

There are exploits that allow you to run remote execution by exploiting SMB, do your research if you believe you need to know these. However, in
many situations you'll find that the best way to hack into a SMB server is by exploiting a misconfiguration. In this case we'll be seeing the
anonyous SMB share access - a common misconfiguration that can allow us to gain information that will lead us to a shell.

From our enumeration stage we know an interesting share and it's location:

//<ip address>/profiles

In order to access an SMB share we can use the tool SMBClient, this tool is part of the Samba suit in Linux. Although it can be installed if it not
present.

We can use SMBClient like this:
	>>> smbclient //<ip>/<share> -U <user> -p <port>

The first thing we'd want to try is check whether this share accepts anonymous users by using the username "Anonymous" and not supplying a password.

In this case it does, when we take a peak around the directory we find the file:
	>>> more "Working From Home Information.txt"

The output gives a full name. And the information that this person's account has ssh access to the server. We also find the directory .ssh which
contains his id_rsa file. We download this file, then change it's permissions with chmod, and then use ssh and the id file to login to the ssh server.

	>>> mget id_rsa (mget = mirror get, meaning it is used to download a file to the current working directory of our local machine for the remote one)
	>>> sudo chmod 600 id_rsa
	>>> sudo ssh -i id_rsa Cactus@<ip address>

NOTE: the command "more" is similar to "cat" in SMB protocol servers.
      mget downloads a file to the cwd
      when using an id_rsa file, use sudo to avoid permission errors when ssh loads the file
      Sometimes it is necessary to change the permission of the ir_rsa file to 600 using chmod, always do this to avoid errors.

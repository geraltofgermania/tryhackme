Nmap - A Powerful Scanning Tool

Introduction

When we are given a target IP/s to perform a security audit on, the first step we must do is enumerate before attempting to exploit.
In order to get a map of the target, we perform a port scan, this will help us determine what services are running on the target, such as
a web server of a Windows Active Directory Domain Controller. Ports are a networking contruct that is necessary in order to make multiple
requests or have multiple services available. For example, when you load multiple pages at once in a browser, the program needs a way to
know which tab is which page. This is done by establishing connections with the remote servers using different ports of your local machine.
Equally, if you want to run different services on your server, like https and http version of the same site, you need a way to direct the
traffic. Again, this is done by running the services on different ports of the server.
Network connections are made between two ports, an open port listening on the server and a randomly selected port on your machine. Like
Port 443 of a web server and port 65235 on your computer.

Ports available: 65535 ports
Standard Ports
Port 80: http
Port 443: https
Port 139: Windows Netbios
Port 445: SMB

These standard ports could be changed in configuration, so it is imperative to perform an scan when enumerating the target.

If we don't know what ports are open on the target, it is almost imposible to succeed in exploiting it. This is how nmap can help us, it
connects to every port and based on how it responds it is determined whether the port is open, closed, or filtered (firewall). Then we
can enumerate the service running on the open ports, usually through nmap as well. Nmap is currently the industry standard tool due to its
functionallity and reliability, which include its scripting engine which sometimes even allows to perform exploits through it.

Nmap Switches

Switches are arguments that tell the program what to do. In order to see the switches for nmap consult the man page.
There are many different types of scans and script-scans that nmap can perform. This will depend on the situation at hand. Pick the one that
best suits your current setting.

Take good time to read the man page of nmap as it is well written and has lots of useful information.

Scan Types: Overview

When port scanning there are three basic scan types:

-sT: TCP connect scans
-sS: SYN "half-open" scans
-sU: UDP scans

Additionally there are several less common scan types:

-sN: null TCP scans
-sX: Xmax TCP scans
-sF: FIN Scans


TCP Connect Scans / -sT

The TCP connect scan uses the TCP three way handshake to work, that is, it used the SYN packet with every port on the target
and based on the response, it determines whether the port is open or not. If a port is closed, upon receiving our SYN request
it would reply with a RST (reset) flag and this ignoring the connection, if the port is open it would reply with a segment
containing the SYN/ACK flags, and nmap would complete the handshare by replying with the ACK flag, nmap would then mark this
port as open. 

If port is closed:
	Client		Target
	SYN ----------->
	   <-----------RST

If port is open:
	Client		Target
	SYN------------->
	  <-------------SYN/ACK
	ACK------------>

This is all correct but there is another scenario which is the Firewall. If nmap sends the TCP SYN request and get nothing
back this most likely means that the port is being walled by a firewall. This makes the port Filtered.

It is also possible to configure a firewall to respond with the TCP RST packet, making it extremely difficult to get a good
idea of the target. Here is an example of how to configure IPtables on Linux to respond with the RST flag:
	>>> iptables -I INPUT -p tcp --dport <port> -j REJECT --reject-with tcp-reset

SYN Scans / -sS

As with TCP scans SYN scans are used to scan the TCP port range of a target; however, the two scans work slightly different.
-sS scans are somtimes referred to as a half-open scan or stealth scan.

Where TCP scans complete the Three Way Handshake as seen above, the SYN scan sends an RST packet upon receiving the SYN/ACK from
the target thus avoiding the target repeatedly making requests.

        Client          Target
        SYN------------->
          <-------------SYN/ACK
        RST------------>

Here are some advantages of this scan type:
	1. They can be used to bypass older IDS as they are looking for a full 3-way Handshake.
	2. SYN scans are often not logged by applications running on open ports since connections are often logged once they
	have been established. This plays into the idea of a SYN scan being stealthy.
	3. Since SYN scans do not complete the 3-Way Handshake, they are significantly faster.

However, some disadvantages do exist:
	1. They require Sudo permitions in order to work correctly in Linux since SYN scans need the ability to generate raw
	packets (as opposed to the full TCP handshake), and this is a privilege that only root has by default.
	2. Unstable services can sometimes be brought down by SYN scans which can be problematic when working for a client's
	production environment. (NOTE: this can be useful as an attack if you know the target is unstable)

The pro's outweigh the con's, and because of this, when nmap is run by sudo the SYN scan is default. If not run as sudo, nmap
defaults to a TCP scan.

When using SYN scan to identify closed or filtered ports, the same rules apply as for a TCP connect scan. If the port is
closed the server responds with the RST TCP packet, and if filtered the SYN request is dropped by the firewall or spoofed with
a RST TCP flag. In this regard both scans are the same, they are different in how open ports are handled.

UDP Scan / -sU

UDP, unlike TCP, is stateless that is, rather than initiating a connection with a back and forth handshake, it relies on
sending packet to the target port and hoping that they make it. This makes UDP useful for connections that rely on speed rather
than quality like video streaming. The lack of acknowlegment in UDP however makes scanning slow and more difficult.

When a packet is sent to and UDP port, no response is expected. If nmap receives no response, then the port could be open
or filtered (by a firewall). If nmap receives a UDP response (very rare) then the port is marked as open. But like it was said before
most likely there won't be response. After receiving no response, nmap sends a second request to double-check, if there is
no response the port is marked as open|filtered, and nmap moves on. 

When a UDP port is closed, howeverm, the targer sends back an ICMP package stating that the port is unreachable and nmap
marks it as closed and moves on. This clearly identifies closed ports.

Due to -sU uncertainty of whether a port is open or filtered, it takes very long to complete a scan, about 20 for just the
first 1000 ports with a good connection. So when we use -sU, it's a good idea to use the option:
	--top-ports <number>
As such:
	>>>sudo nmap -sU --top-ports 20
This will only scan the top 20 most commonly used UDP ports, resulting in a more acceptable scan time.

When scanning UDP ports nmap will usually send completely empty UDP datagrams, just raw UDP packets. However, when scanning
ports for well-known UDP services it will send a more protocol specific payload which is more likely to provoke a response from
which a more accurate result can be drawn.

TCP Null Scans / -sN

Tends to be stealthier than a SYN scan. In this scan, nmap sends a completely empty request. If the port if closed, the target
responds with a RST flag.

TCP FIN Scan / -sF

Like the scan before, this one tends to be stealthy. It sends a FIN request to the targer, if the port is closed the target
should respond with a RST flag.

TCP Xmas Scan / -sX 

This scan sends a malformed TCP packet and expects a RST flag for closed ports. It is referred to as an Xmas scan because the flags
it sets make it look like a Christmast tree in a wireshark packet capture. It uses the URG, PSH, and FIN flags (Urgernt, Push, Finalize
respectively)

The expected response for these three scans is identical, and very similar to UDP scans, that is no response is expected. Unfortunately,
as with UDP, this is the expected response when a port is protected for a firewall, so these scans will only mark ports as open|filtered,
closed, or filtered. If a port is marked as filtered with one of these scans it's usually because the target reponded with an
ICMP unreachable packet.

Even though RFC 793 mandates no response to malformed packets for open ports and RST response for closed ports, this is not always
the case.Many Microsoft Windows and Cisco devices often respond to malformed packets with the RST flag. This results in all ports
showing up as closed. 

That being said the purpose of these scans, with 'malformed' packets is firewall evation. Many firewalls are configured to drop packets
with the SYN flagset, thus eliminating new connections. By sending packets that lack the SYN flag, we can bypass this firewall type.
While this is the case in theory, many of the new IDS are savvy to this method and are configured to detect it.



How Websites Work

When you visit a website your browser makes a request to a web server for information about
the page you want to visit. The server responds with data your browser uses to show you the
website.

There are two major sides to websites:
Front End (Client Side): the way your browser renders a website
Back End (Server Side): a server that process your requests and returns a response.

Websites are made of 3 individual languages:
HTML HyperText Markup Language
CSS for Styling
JavaScript for functionality

JavaScript

JS is places within <script> tags or sourced using <script src='src.js'></script>
JS can be used to add functionality to the page as well as handle data and update the
user's view. It can be used with HTML elements to react to events such as onclick, etc.

Sensitive Data Exposure

Sensitive Data Exposure occurs when websites fail to remove or protect sensitive data from the user side, that is, the front
end source code.
We can view the site's source code and sometimes developers forget to remove login info, private links, etc. which
may be found mixed in the HTML.
For example if you were to find any information it could be used to further your attack: you could use temporary
credentials found in the source code to login other parts of the web application and they could work in the backend
too as people tend to use the same credentials.

When accessing a web application for security purposes one of the first things we should do is to review the page source
for any credentials, hidden links, or any potentially useful information.

HTML Injection
HTML Injection is a vulnerability that happens when a page fails to sanitize or validate user input and unfiltered input is
displayed on the page. When websites don't filter what is displayed, attackers can then type HTML or JS code that will be executed
client side altering the functionality of the page. For example, in an unfiltered input field, an attacker can enter their own
HTML tags and JS scripts that will be executed as pure code. 
The general rule is to never trust user input, the developer should always sanitize what the user inputs, such as removing HTML 
tags and JS keywords. 

Putting it all Together 

When you request a website your computer uses DNS to figure out the address of the server. Then HTTP is used to share 
HTMl, CSS, and JS which are then used to render the webpage on your browser.

Other Components

Load Balancers: when a website's traffic starts getting large or running an application that requires high availability
, one server might no longer do the job. Load balancers ensure that websites can handle the load and provide a failover
if a server becomes unresponsive. When you make a request to a site with a load balancer, it will receive your request
and then forward it to one of the servers behind it. Load balancers use several types of algorithms to choose which server
they'll send your request to.
Load balancers also perform periodic health checks, if a server doesn't respond appropriately or doesn't respond at all, 
the load balancers stops forwarding it requests until it responds appropriately again. 

Content Delivery Networks CDN

A Content Delivery Network allows you to hold static files from your website such as HTML, CSS, JS, images, and videos
accross many servers all over the world. When the client makes a request, the CDN figures out which server is physically
closest and sends the request there. This helps with traffic and speed.

Databases

Websites need to store and recall information, for this they can communicate with databases which can range from
a simple text file to complex clusters of servers. Some common data bases: MySQL, MSSQL, MongoDB, GraphQL, Postgres.

Web Application Firewall WAF

The WAF sits between a request and the web server, it's primary purpose is to protect the webserver against common
attacks. It does this by analyzing the request for common attacks such as if the request was sent from an actual
server rather than a bot, and rate limiting which only allows a certain max number of requests per IP per second.
If the request is deemed an attack it is dropped and never sent to the server.

How Web Servers Work

A web server is software that listens for incomming connections and then utilizes HTTP protocol to deliver content to its
clients. The most common web servers we'll find are Apache, Nginx, IIS, and NodeJS. A web server delivers files from its
root directory which is defined in its software settings. For example Apache and Nginx share the same default location in
Linux of /var/www/html and IIS uses C:\inetpub\wwwroot for Windows operating systems.

If you were to request the file www.example.com/image.jpg, Apache would return /var/www/html/image.jpg from its local
hard drive.

Virtual Hosts

Web servers can host multiple websites in what is called virtual hosts. The webserver checks which host is bein requested
in the HTTP headers and if found the requested website is provided, otherwise the default website is provided. Virual hosts 
are simply text based configuration files that map websites to different directories, for example, /var/www/website_one being 
a virtual host and /var/www/website_two being another. There is no limit as to how many hosts a server may have.

Static vs Dynamic Content

Static content as the name suggests is content that never changes such as CSS, JS, images, or videos. It could also include
HTML that never changes. These are files that are served directly from the webs server with no changes made to them.

Dynamic content is content that changes with each request, for example a blog page that updates to the latest post, or a
search result page in which result are dependent on the words used to search. These changes and processing are happening 
in the backend with the use of programming and scripting languages. You cannot view these as everything that is displayed 
in your browser is part of the front end.

Scripting and Backend Languages

These languages are what make the website interactive and useful to the user, they are able to call external services, interact
with data bases, process data for the user and more. Some backend languages are PHP, Python, Ruby, NodeJS, Perl, etc. 

A very basic PHP example of this would be if you requested the website http://example.com/index.php?name=adam

If index.php was built like this:

<html><body>Hello <?php echo $_GET["name"]; ?></body></html>

It would output the following to the client:

<html><body>Hello adam</body></html>

You'll notice that the client doesn't see any PHP code because it's on the Backend. This interactivity opens up a lot more security
issues for web applications that haven't been created securely, as you learn in further modules.

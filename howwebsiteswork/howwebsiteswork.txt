How Websites Work

When you visit a website your browser makes a request to a web server for information about
the page you want to visit. The server responds with data your browser uses to show you the
website.

There are two major sides to websites:
Front End (Client Side): the way your browser renders a website
Back End (Server Side): a server that process your requests and returns a response.

Websites are made of 3 individual languages:
HTML HyperText Markup Language
CSS for Styling
JavaScript for functionality

JavaScript

JS is places within <script> tags or sourced using <script src='src.js'></script>
JS can be used to add functionality to the page as well as handle data and update the
user's view. It can be used with HTML elements to react to events such as onclick, etc.

Sensitive Data Exposure

Sensitive Data Exposure occurs when websites fail to remove or protect sensitive data from the user side, that is, the front
end source code.
We can view the site's source code and sometimes developers forget to remove login info, private links, etc. which
may be found mixed in the HTML.
For example if you were to find any information it could be used to further your attack: you could use temporary
credentials found in the source code to login other parts of the web application and they could work in the backend
too as people tend to use the same credentials.

When accessing a web application for security purposes one of the first things we should do is to review the page source
for any credentials, hidden links, or any potentially useful information.

HTML Injection
HTML Injection is a vulnerability that happens when a page fails to sanitize or validate user input and unfiltered input is
displayed on the page. When websites don't filter what is displayed, attackers can then type HTML or JS code that will be executed
client side altering the functionality of the page. For example, in an unfiltered input field, an attacker can enter their own
HTML tags and JS scripts that will be executed as pure code. 
The general rule is to never trust user input, the developer should always sanitize what the user inputs, such as removing HTML 
tags and JS keywords. 

